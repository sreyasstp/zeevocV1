[
    {
      "_id": "668fb58ff781f5e8cd91d544",
      "images": "02",
      "title": "Create Custom Shipping Methods in Magento 2",
      "category": "Customization",
      "author": "Zeevoc Digital",
      "urlKey": "custom-shipping-methods-magento-2",
      "comments_count": 10,
      "created_at": "2024-12-04T18:30:00.000Z",
      "meta_title": "How to Create Custom Shipping Methods in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to implement custom shipping methods in Magento 2 with this detailed guide. Zeevoc Digital provides step-by-step instructions for customization.",
      "__v": 0,
      "html_contentOld": "<div>\n    <h3 class=\"title\">Steps to Install Magento on Ubuntu</h3>\n    <p>Magento is a powerful and flexible open-source e-commerce platform that provides a wide range of features and customization options. Installing Magento correctly ensures a stable and secure online store. Follow the steps below to install Magento on your server.</p>\n    <div class=\"thumbnail\">\n        <img src=\"/assets/images/blog/bl-big-01.jpg\" alt=\"Blog Images\" />\n    </div>\n    <p class=\"mt--40\">Before you begin, ensure your server meets the necessary system requirements for running Magento, such as the correct PHP version, required PHP extensions, and appropriate server settings.</p>\n    <blockquote class=\"rn-blog-quote\">\"Setting up Magento correctly from the start is crucial for the performance and security of your online store.\"</blockquote>\n    <p>Magento requires a database to store all its data. You can create a new database for Magento using your hosting control panel or via the command line interface.</p>\n\n    <!-- Magento Installation Steps -->\n    <div class=\"installation-steps\">\n        <h3 class=\"title\">Steps to Install Magento</h3>\n        <ul>\n            <li>\n                <h4 class=\"step-title\">Step 1: System Requirements</h4>\n                <p>Ensure your server meets the system requirements for Magento. This includes having the correct PHP version, necessary extensions, and appropriate server settings.</p>\n            </li>\n            <li>\n                <h4 class=\"step-title\">Step 2: Download Magento</h4>\n                <p>Download the Magento software from the official website or via Composer. Use the following command to download Magento via Composer:</p>\n                <div class=\"code-snippet\">\n                    <pre>\n                        <code>composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.4.3</code>\n                    </pre>\n                    <button class=\"copy-button\" data-copy=\"composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.4.3\">\n                        <i class=\"fi fi-copy\"></i> Copy\n                    </button>\n                </div>\n            </li>\n            <li>\n                <h4 class=\"step-title\">Step 3: Set Up Database</h4>\n                <p>Create a new database for Magento to use. You can do this via your hosting control panel or by using the command line:</p>\n                <div class=\"code-snippet\">\n                    <pre>\n                        <code>CREATE DATABASE magento;</code>\n                    </pre>\n                    <button class=\"copy-button\" data-copy=\"CREATE DATABASE magento;\">\n                        <i class=\"fi fi-copy\"></i> Copy\n                    </button>\n                </div>\n            </li>\n            <li>\n                <h4 class=\"step-title\">Step 4: Configure Magento</h4>\n                <p>Run the Magento setup wizard or use the command line to configure Magento. Ensure you provide the necessary database and admin user information. Example command:</p>\n                <div class=\"code-snippet\">\n                    <pre>\n                        <code>bin/magento setup:install --base-url=http://your-domain.com/ --db-host=localhost --db-name=magento --db-user=root --db-password=yourpassword --admin-firstname=Admin --admin-lastname=User --admin-email=admin@your-domain.com --admin-user=admin --admin-password=admin123</code>\n                    </pre>\n                    <button class=\"copy-button\" data-copy=\"bin/magento setup:install --base-url=http://your-domain.com/ --db-host=localhost --db-name=magento --db-user=root --db-password=yourpassword --admin-firstname=Admin --admin-lastname=User --admin-email=admin@your-domain.com --admin-user=admin --admin-password=admin123\">\n                        <i class=\"fi fi-copy\"></i> Copy\n                    </button>\n                </div>\n            </li>\n            <li>\n                <h4 class=\"step-title\">Step 5: Finalize Installation</h4>\n                <p>Set the correct file permissions and deploy static content. Example commands:</p>\n                <div class=\"code-snippet\">\n                    <pre>\n                        <code>find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w {} + && find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} + && chown -R :www-data . && chmod u+x bin/magento\nbin/magento setup:static-content:deploy -f</code>\n                    </pre>\n                    <button class=\"copy-button\" data-copy=\"find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w {} + && find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} + && chown -R :www-data . && chmod u+x bin/magento\\nbin/magento setup:static-content:deploy -f\">\n                        <i class=\"fi fi-copy\"></i> Copy\n                    </button>\n                </div>\n            </li>\n        </ul>\n    </div>\n\n    <p class=\"mt--25 mt_sm--5\">Once the installation is complete, you can access the Magento admin panel by navigating to your store's base URL followed by /admin. From there, you can begin setting up your store, adding products, and configuring settings to meet your business needs.</p>\n    <div class=\"video-wrapper position-relative mb--40\">\n        <div class=\"thumbnail\">\n            <img src=\"/assets/images/blog/bl-big-01.jpg\" alt=\"Blog Images\" />\n        </div>\n        <button class=\"video-popup position-top-center\" onclick=\"openModal()\"><span class=\"play-icon\"></span></button>\n    </div>\n    <p class=\"mb--0\">Magento's flexibility and scalability make it a popular choice for businesses of all sizes. With a large community of developers and a wide range of extensions available, Magento can be tailored to suit the specific needs of your online store.</p>\n</div>\n\n\n<div class=\"code-download\">\n    <h3 class=\"title\">Download Code Snippets</h3>\n    <p>You can download the code snippets used in this guide from the link below:</p>\n    <a href=\"/path/to/your/snippets.zip\" class=\"download-button\" download>\n        <i class=\"fi fi-download\"></i> Download Code Snippets\n    </a>\n</div>\n\n",
      "html_content": "<div>\n    <h3 class=\"title\">How to Create Custom Shipping Methods in Magento 2</h3>\n    <p>Magento 2 offers extensive customization options, including the ability to create custom shipping methods. This guide will walk you through the process of setting up custom shipping methods in your Magento 2 store.</p>\n    <div class=\"thumbnail\">\n        <img src=\"/assets/images/blog/bl-big-01.jpg\" alt=\"Blog Images\" />\n    </div>\n    <p class=\"mt--40\">Before you begin, ensure you have a basic understanding of Magento 2 module development and that your Magento 2 store meets the necessary system requirements.</p>\n    <blockquote class=\"rn-blog-quote\">\"Customizing shipping methods allows you to provide more flexibility and better service to your customers.\"</blockquote>\n    <p>Custom shipping methods can be created by defining a new carrier and configuring its behavior through custom code. Follow the steps below to implement a custom shipping method.</p>\n\n    <!-- Custom Shipping Method Steps -->\n    <div class=\"installation-steps\">\n        <h3 class=\"title\">Steps to Create Custom Shipping Methods</h3>\n        <ul>\n            <li>\n                <h4 class=\"step-title\">Step 1: Create a New Module</h4>\n                <p>Create a new module for your custom shipping method. This involves setting up the necessary module files and configurations.</p>\n                <div class=\"thumbnail\">\n                    <img src=\"/mnt/data/Screenshot from 2024-07-16 21-25-17.png\" alt=\"Folder Structure\" />\n                </div>\n                <div class=\"code-snippet\">\n                    <pre>\n                        <code>&lt;?php\n\ndeclare(strict_types=1);\n\nuse Magento\\Framework\\Component\\ComponentRegistrar;\n\nComponentRegistrar::register(\n    ComponentRegistrar::MODULE,\n    'Zeevoc_CustomShipping',\n    __DIR__\n);</code>\n                    </pre>\n                    <button class=\"copy-button\" data-copy=\"&lt;?php\n\ndeclare(strict_types=1);\n\nuse Magento\\Framework\\Component\\ComponentRegistrar;\n\nComponentRegistrar::register(\n    ComponentRegistrar::MODULE,\n    'Zeevoc_CustomShipping',\n    __DIR__\n);\">\n                        <i class=\"fi fi-copy\"></i> Copy\n                    </button>\n                </div>\n            </li>\n            <li>\n                <h4 class=\"step-title\">Step 2: Define the Carrier Configuration</h4>\n                <p>Define the carrier configuration in your module's configuration files. This includes setting up the carrier's basic information and settings.</p>\n                <div class=\"code-snippet\">\n                    <pre>\n                        <code>&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Config:etc/system_file.xsd\"&gt;\n    &lt;system&gt;\n        &lt;section id=\"carriers\"&gt;\n            &lt;group id=\"customshipping\" translate=\"label\" type=\"text\" sortOrder=\"0\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;\n                &lt;label&gt;Shipping Rate/Kg Method&lt;/label&gt;\n                &lt;field id=\"active\" translate=\"label\" type=\"select\" sortOrder=\"10\"&gt;\n                    &lt;label&gt;Enabled&lt;/label&gt;\n                    &lt;source_model&gt;Magento\\Config\\Model\\Config\\Source\\Yesno&lt;/source_model&gt;\n                &lt;/field&gt;\n                &lt;field id=\"title\" translate=\"label\" type=\"text\" sortOrder=\"20\"&gt;\n                    &lt;label&gt;Method Title&lt;/label&gt;\n                &lt;/field&gt;\n                &lt;field id=\"name\" translate=\"label\" type=\"text\" sortOrder=\"30\"&gt;\n                    &lt;label&gt;Method Name&lt;/label&gt;\n                &lt;/field&gt;\n                &lt;field id=\"shipping_cost_one\" translate=\"label\" type=\"text\" sortOrder=\"40\"&gt;\n                    &lt;label&gt;Shipping Cost for 0-10 Kg Products&lt;/label&gt;\n                    &lt;validate&gt;validate-number validate-zero-or-greater&lt;/validate&gt;\n                &lt;/field&gt;\n                &lt;field id=\"shipping_cost_two\" translate=\"label\" type=\"text\" sortOrder=\"40\"&gt;\n                    &lt;label&gt;Shipping Cost for 10-20 Kg Products&lt;/label&gt;\n                    &lt;validate&gt;validate-number validate-zero-or-greater&lt;/validate&gt;\n                &lt;/field&gt;\n                &lt;field id=\"shipping_cost_three\" translate=\"label\" type=\"text\" sortOrder=\"40\"&gt;\n                    &lt;label&gt;Shipping Cost for Products Greater than 30Kg&lt;/label&gt;\n                    &lt;validate&gt;validate-number validate-zero-or-greater&lt;/validate&gt;\n                &lt;/field&gt;\n                &lt;field id=\"sallowspecific\" translate=\"label\" type=\"select\" sortOrder=\"50\"&gt;\n                    &lt;label&gt;Ship to Applicable Countries&lt;/label&gt;\n                    &lt;frontend_class&gt;shipping-applicable-country&lt;/frontend_class&gt;\n                    &lt;source_model&gt;Magento\\Shipping\\Model\\Config\\Source\\Allspecificcountries&lt;/source_model&gt;\n                &lt;/field&gt;\n                &lt;field id=\"specificcountry\" translate=\"label\" type=\"multiselect\" sortOrder=\"60\"&gt;\n                    &lt;label&gt;Ship to Specific Countries&lt;/label&gt;\n                    &lt;source_model&gt;Magento\\Directory\\Model\\Config\\Source\\Country&lt;/source_model&gt;\n                    &lt;can_be_empty&gt;1&lt;/can_be_empty&gt;\n                &lt;/field&gt;\n                &lt;field id=\"showmethod\" translate=\"label\" type=\"select\" sortOrder=\"70\"&gt;\n                    &lt;label&gt;Show Method if not applicable&lt;/label&gt;\n                    &lt;source_model&gt;Magento\\Config\\Model\\Config\\Source\\Yesno&lt;/source_model&gt;\n                    &lt;frontend_class&gt;shipping-skip-hide&lt;/frontend_class&gt;\n                &lt;/field&gt;\n                &lt;field id=\"sort_order\" translate=\"label\" type=\"text\" sortOrder=\"80\"&gt;\n                    &lt;label&gt;Sort Order&lt;/label&gt;\n                &lt;/field&gt;\n            &lt;/group&gt;\n        &lt;/section&gt;\n    &lt;/system&gt;\n&lt;/config&gt;</code>\n                    </pre>\n                    <button class=\"copy-button\" data-copy=\"&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n        xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Config:etc/system_file.xsd&quot;&gt;\n    &lt;system&gt;\n        &lt;section id=&quot;carriers&quot;&gt;\n            &lt;group id=&quot;customshipping&quot; translate=&quot;label&quot; type=&quot;text&quot; sortOrder=&quot;0&quot; showInDefault=&quot;1&quot; showInWebsite=&quot;1&quot; showInStore=&quot;1&quot;&gt;\n                &lt;label&gt;Shipping Rate/Kg Method&lt;/label&gt;\n                &lt;field id=&quot;active&quot; translate=&quot;label&quot; type=&quot;select&quot; sortOrder=&quot;10&quot;&gt;\n                    &lt;label&gt;Enabled&lt;/label&gt;\n                    &lt;source_model&gt;Magento\\Config\\Model\\Config\\Source\\Yesno&lt;/source_model&gt;\n                &lt;/field&gt;\n                &lt;field id=&quot;title&quot; translate=&quot;label&quot; type=&quot;text&quot; sortOrder=&quot;20&quot;&gt;\n                    &lt;label&gt;Method Title&lt;/label&gt;\n                &lt;/field&gt;\n                &lt;field id=&quot;name&quot; translate=&quot;label&quot; type=&quot;text&quot; sortOrder=&quot;30&quot;&gt;\n                    &lt;label&gt;Method Name&lt;/label&gt;\n                &lt;/field&gt;\n                &lt;field id=&quot;shipping_cost_one&quot; translate=&quot;label&quot; type=&quot;text&quot; sortOrder=&quot;40&quot;&gt;\n                    &lt;label&gt;Shipping Cost for 0-10 Kg Products&lt;/label&gt;\n                    &lt;validate&gt;validate-number validate-zero-or-greater&lt;/validate&gt;\n                &lt;/field&gt;\n                &lt;field id=&quot;shipping_cost_two&quot; translate=&quot;label&quot; type=&quot;text&quot; sortOrder=&quot;40&quot;&gt;\n                    &lt;label&gt;Shipping Cost for 10-20 Kg Products&lt;/label&gt;\n                    &lt;validate&gt;validate-number validate-zero-or-greater&lt;/validate&gt;\n                &lt;/field&gt;\n                &lt;field id=&quot;shipping_cost_three&quot; translate=&quot;label&quot; type=&quot;text&quot; sortOrder=&quot;40&quot;&gt;\n                    &lt;label&gt;Shipping Cost for Products Greater than 30Kg&lt;/label&gt;\n                    &lt;validate&gt;validate-number validate-zero-or-greater&lt;/validate&gt;\n                &lt;/field&gt;\n                &lt;field id=&quot;sallowspecific&quot; translate=&quot;label&quot; type=&quot;select&quot; sortOrder=&quot;50&quot;&gt;\n                    &lt;label&gt;Ship to Applicable Countries&lt;/label&gt;\n                    &lt;frontend_class&gt;shipping-applicable-country&lt;/frontend_class&gt;\n                    &lt;source_model&gt;Magento\\Shipping\\Model\\Config\\Source\\Allspecificcountries&lt;/source_model&gt;\n                &lt;/field&gt;\n                &lt;field id=&quot;specificcountry&quot; translate=&quot;label&quot; type=&quot;multiselect&quot; sortOrder=&quot;60&quot;&gt;\n                    &lt;label&gt;Ship to Specific Countries&lt;/label&gt;\n                    &lt;source_model&gt;Magento\\Directory\\Model\\Config\\Source\\Country&lt;/source_model&gt;\n                    &lt;can_be_empty&gt;1&lt;/can_be_empty&gt;\n                &lt;/field&gt;\n                &lt;field id=&quot;showmethod&quot; translate=&quot;label&quot; type=&quot;select&quot; sortOrder=&quot;70&quot;&gt;\n                    &lt;label&gt;Show Method if not applicable&lt;/label&gt;\n                    &lt;source_model&gt;Magento\\Config\\Model\\Config\\Source\\Yesno&lt;/source_model&gt;\n                    &lt;frontend_class&gt;shipping-skip-hide&lt;/frontend_class&gt;\n                &lt;/field&gt;\n                &lt;field id=&quot;sort_order&quot; translate=&quot;label&quot; type=&quot;text&quot; sortOrder=&quot;80&quot;&gt;\n                    &lt;label&gt;Sort Order&lt;/label&gt;\n                &lt;/field&gt;\n            &lt;/group&gt;\n        &lt;/section&gt;\n    &lt;/system&gt;\n&lt;/config&gt;\">\n                        <i class=\"fi fi-copy\"></i> Copy\n                    </button>\n                </div>\n            </li>\n            <li>\n                <h4 class=\"step-title\">Step 3: Implement the Carrier Logic</h4>\n                <p>Implement the logic for your custom shipping method in your module's model files. This involves defining how the shipping method calculates rates and handles shipments.</p>\n                <div class=\"code-snippet\">\n                    <pre>\n                        <code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace Zeevoc\\CustomShipping\\Model\\Carrier;\n\nuse Magento\\Framework\\App\\Config\\ScopeConfigInterface;\nuse Magento\\Quote\\Model\\Quote\\Address\\RateRequest;\nuse Magento\\Quote\\Model\\Quote\\Address\\RateResult\\Method;\nuse Magento\\Quote\\Model\\Quote\\Address\\RateResult\\MethodFactory;\nuse Magento\\Quote\\Model\\Quote\\Address\\RateResult\\ErrorFactory;\nuse Magento\\Shipping\\Model\\Carrier\\AbstractCarrier;\nuse Magento\\Shipping\\Model\\Carrier\\CarrierInterface;\nuse Magento\\Shipping\\Model\\Rate\\Result;\nuse Magento\\Shipping\\Model\\Rate\\ResultFactory;\nuse Psr\\Log\\LoggerInterface;\n\nclass Customshipping extends AbstractCarrier implements CarrierInterface\n{\n    protected $_code = 'customshipping';\n    protected $_isFixed = true;\n    private ResultFactory $rateResultFactory;\n    private MethodFactory $rateMethodFactory;\n\n    private const SHIPPING_COST_ONE = \"carriers/customshipping/shipping_cost_one\";\n    private const SHIPPING_COST_TWO = \"carriers/customshipping/shipping_cost_two\";\n    private const SHIPPING_COST_THREE = \"carriers/customshipping/shipping_cost_three\";\n\n    public function __construct(\n        ScopeConfigInterface $scopeConfig,\n        ErrorFactory $rateErrorFactory,\n        LoggerInterface $logger,\n        ResultFactory $rateResultFactory,\n        MethodFactory $rateMethodFactory,\n        array $data = []\n    ) {\n        parent::__construct($scopeConfig, $rateErrorFactory, $logger, $data);\n\n        $this->rateResultFactory = $rateResultFactory;\n        $this->rateMethodFactory = $rateMethodFactory;\n        $this->scopeConfig = $scopeConfig;\n    }\n\n    public function collectRates(RateRequest $request)\n    {\n        if (!$this->getConfigFlag('active')) {\n            return false;\n        }\n\n        $method = $this->rateMethodFactory->create();\n\n        $method->setCarrier($this->_code);\n        $method->setCarrierTitle($this->getConfigData('title'));\n\n        $method->setMethod($this->_code);\n        $method->setMethodTitle($this->getConfigData('name'));\n\n        $shippingCost = (float) $this->getConfigData('shipping_cost');\n        $weight = (int)$request->getPackageWeight();\n\n        $configPriceValueOne = $this->getConfigValue(self::SHIPPING_COST_ONE);\n        $configPriceValueTwo = $this->getConfigValue(self::SHIPPING_COST_TWO);\n        $configPriceValueThree = $this->getConfigValue(self::SHIPPING_COST_THREE);\n\n        if ($weight <= 10) {\n            $method->setPrice($configPriceValueOne);\n            $method->setCost($configPriceValueOne);\n        } elseif ($weight >10 && $weight <= 20) {\n            $method->setPrice($configPriceValueTwo);\n            $method->setCost($configPriceValueTwo);\n        } else {\n            $method->setPrice($configPriceValueThree);\n            $method->setCost($configPriceValueThree);\n        }\n\n        $result = $this->rateResultFactory->create();\n        $result->append($method);\n\n        return $result;\n    }\n\n    public function getAllowedMethods(): array\n    {\n        return [$this->_code => $this->getConfigData('name')];\n    }\n\n    public function getConfigValue($path)\n    {\n        return $this->scopeConfig->getValue(\n            $path,\n            \\Magento\\Store\\Model\\ScopeInterface::SCOPE_STORE,\n        );\n    }\n}</code>\n                    </pre>\n                    <button class=\"copy-button\" data-copy=\"&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace Zeevoc\\CustomShipping\\Model\\Carrier;\n\nuse Magento\\Framework\\App\\Config\\ScopeConfigInterface;\nuse Magento\\Quote\\Model\\Quote\\Address\\RateRequest;\nuse Magento\\Quote\\Model\\Quote\\Address\\RateResult\\Method;\nuse Magento\\Quote\\Model\\Quote\\Address\\RateResult\\MethodFactory;\nuse Magento\\Quote\\Model\\Quote\\Address\\RateResult\\ErrorFactory;\nuse Magento\\Shipping\\Model\\Carrier\\AbstractCarrier;\nuse Magento\\Shipping\\Model\\Carrier\\CarrierInterface;\nuse Magento\\Shipping\\Model\\Rate\\Result;\nuse Magento\\Shipping\\Model\\Rate\\ResultFactory;\nuse Psr\\Log\\LoggerInterface;\n\nclass Customshipping extends AbstractCarrier implements CarrierInterface\n{\n    protected \\$_code = 'customshipping';\n    protected \\$_isFixed = true;\n    private ResultFactory \\$rateResultFactory;\n    private MethodFactory \\$rateMethodFactory;\n\n    private const SHIPPING_COST_ONE = &quot;carriers/customshipping/shipping_cost_one&quot;;\n    private const SHIPPING_COST_TWO = &quot;carriers/customshipping/shipping_cost_two&quot;;\n    private const SHIPPING_COST_THREE = &quot;carriers/customshipping/shipping_cost_three&quot;;\n\n    public function __construct(\n        ScopeConfigInterface \\$scopeConfig,\n        ErrorFactory \\$rateErrorFactory,\n        LoggerInterface \\$logger,\n        ResultFactory \\$rateResultFactory,\n        MethodFactory \\$rateMethodFactory,\n        array \\$data = []\n    ) {\n        parent::__construct(\\$scopeConfig, \\$rateErrorFactory, \\$logger, \\$data);\n\n        \\$this->rateResultFactory = \\$rateResultFactory;\n        \\$this->rateMethodFactory = \\$rateMethodFactory;\n        \\$this->scopeConfig = \\$scopeConfig;\n    }\n\n    public function collectRates(RateRequest \\$request)\n    {\n        if (!\\$this->getConfigFlag('active')) {\n            return false;\n        }\n\n        \\$method = \\$this->rateMethodFactory->create();\n\n        \\$method->setCarrier(\\$this->_code);\n        \\$method->setCarrierTitle(\\$this->getConfigData('title'));\n\n        \\$method->setMethod(\\$this->_code);\n        \\$method->setMethodTitle(\\$this->getConfigData('name'));\n\n        \\$shippingCost = (float) \\$this->getConfigData('shipping_cost');\n        \\$weight = (int)\\$request->getPackageWeight();\n\n        \\$configPriceValueOne = \\$this->getConfigValue(self::SHIPPING_COST_ONE);\n        \\$configPriceValueTwo = \\$this->getConfigValue(self::SHIPPING_COST_TWO);\n        \\$configPriceValueThree = \\$this->getConfigValue(self::SHIPPING_COST_THREE);\n\n        if (\\$weight &lt;= 10) {\n            \\$method->setPrice(\\$configPriceValueOne);\n            \\$method->setCost(\\$configPriceValueOne);\n        } elseif (\\$weight &gt;10 && \\$weight &lt;= 20) {\n            \\$method->setPrice(\\$configPriceValueTwo);\n            \\$method->setCost(\\$configPriceValueTwo);\n        } else {\n            \\$method->setPrice(\\$configPriceValueThree);\n            \\$method->setCost(\\$configPriceValueThree);\n        }\n\n        \\$result = \\$this->rateResultFactory->create();\n        \\$result->append(\\$method);\n\n        return \\$result;\n    }\n\n    public function getAllowedMethods(): array\n    {\n        return [\\$this->_code =&gt; \\$this->getConfigData('name')];\n    }\n\n    public function getConfigValue(\\$path)\n    {\n        return \\$this->scopeConfig->getValue(\n            \\$path,\n            \\Magento\\Store\\Model\\ScopeInterface::SCOPE_STORE,\n        );\n    }\n}\">\n                        <i class=\"fi fi-copy\"></i> Copy\n                    </button>\n                </div>\n            </li>\n            <li>\n                <h4 class=\"step-title\">Step 4: Test Your Custom Shipping Method</h4>\n                <p>Test your custom shipping method to ensure it works as expected. This involves placing test orders and verifying that the custom shipping method appears and functions correctly.</p>\n            </li>\n        </ul>\n    </div>\n\n    <p class=\"mt--25 mt_sm--5\">Once you have completed the steps, your custom shipping method should be available in the Magento 2 admin panel and on the storefront. You can further customize the method as needed to suit your specific business requirements.</p>\n    <div class=\"video-wrapper position-relative mb--40\">\n        <div class=\"thumbnail\">\n            <img src=\"/assets/images/blog/bl-big-01.jpg\" alt=\"Blog Images\" />\n        </div>\n        <button class=\"video-popup position-top-center\" onclick=\"openModal()\"><span class=\"play-icon\"></span></button>\n    </div>\n    <p class=\"mb--0\">Magento's flexibility allows you to create a wide range of customizations, including custom shipping methods. By following this guide, you can enhance your store's shipping capabilities and provide a better experience for your customers.</p>\n</div>\n\n<div class=\"code-download\">\n    <h3 class=\"title\">Download Code Snippets</h3>\n    <p>You can download the code snippets used in this guide from the link below:</p>\n    <a href=\"https://github.com/sreyasilp/zeevocV1/archive/refs/heads/master.zip\" class=\"download-button\" download>\n        <i class=\"fi fi-download\"></i> Download Code\n    </a>\n</div>\n\n"
    },
    {
      "_id": "668fb58ff781f5e8cd91d53f",
      "images": "03",
      "title": "Factory vs Repository in Magento 2",
      "category": "Best Practices",
      "html_content": "<div>\n    <h3 class=\"title\">Factory vs Repository in Magento 2</h3>\n    <p>Understanding the differences between Factory and Repository patterns in Magento 2 is crucial for efficient development. This guide will help you understand when to use each pattern and how they can improve your code structure.</p>\n    <div class=\"thumbnail\">\n        <img src=\"/assets/images/blog/bl-big-01.jpg\" alt=\"Blog Images\" />\n    </div>\n    <p class=\"mt--40\">Factories and Repositories are two fundamental patterns in Magento 2 development. Both serve different purposes and can greatly enhance the flexibility and maintainability of your code when used correctly.</p>\n    <blockquote class=\"rn-blog-quote\">\"Choosing the right pattern for the right situation can significantly improve your code's quality and maintainability.\"</blockquote>\n    <p>Let's explore the differences and use cases for Factory and Repository patterns in Magento 2 development.</p>\n\n    <!-- Factory vs Repository Explanation -->\n    <div class=\"installation-steps\">\n        <h3 class=\"title\">Understanding Factory vs Repository</h3>\n        <div class=\"content-section\">\n            <h4 class=\"content-title\">Factory Pattern</h4>\n            <p>The Factory pattern is used to create objects without specifying the exact class of object that will be created. In Magento 2, factories are typically used to create instances of models.</p>\n            <pre>\n                <code>\n// Example: Using Factory Pattern to create a model instance\nprotected $modelFactory;\n\npublic function __construct(\n    \\Vendor\\Module\\Model\\ExampleFactory $modelFactory\n) {\n    $this->modelFactory = $modelFactory;\n}\n\npublic function execute() {\n    $exampleModel = $this->modelFactory->create();\n    $exampleModel->setData('field', 'value');\n    $exampleModel->save();\n}\n                </code>\n            </pre>\n            <p>Factories are particularly useful when you need to create instances of models dynamically at runtime. They help in managing dependencies and provide a single point of control for object creation.</p>\n        </div>\n        <div class=\"content-section\">\n            <h4 class=\"content-title\">Repository Pattern</h4>\n            <p>The Repository pattern is used to retrieve and persist entities. In Magento 2, repositories provide a collection-like interface for accessing domain objects and can be used to abstract away the details of data storage.</p>\n            <pre>\n                <code>\n// Example: Using Repository Pattern to fetch and save data\nprotected $exampleRepository;\n\npublic function __construct(\n    \\Vendor\\Module\\Api\\ExampleRepositoryInterface $exampleRepository\n) {\n    $this->exampleRepository = $exampleRepository;\n}\n\npublic function execute() {\n    $exampleId = 1;\n    $example = $this->exampleRepository->getById($exampleId);\n    $example->setData('field', 'new_value');\n    $this->exampleRepository->save($example);\n}\n                </code>\n            </pre>\n            <p>Repositories are used to encapsulate the logic required to access data sources. They are helpful in separating the business logic from data access logic, making the code easier to test and maintain.</p>\n        </div>\n    </div>\n\n    <p class=\"mt--25 mt_sm--5\">By understanding and applying these patterns correctly, you can write more maintainable and flexible code in Magento 2. Each pattern has its place and can greatly improve the structure of your application when used appropriately.</p>\n    <div class=\"video-wrapper position-relative mb--40\">\n        <div class=\"thumbnail\">\n            <img src=\"/assets/images/blog/bl-big-01.jpg\" alt=\"Blog Images\" />\n        </div>\n        <button class=\"video-popup position-top-center\" onclick=\"openModal()\"><span class=\"play-icon\"></span></button>\n    </div>\n    <p class=\"mb--0\">Magento's architecture is designed to be flexible and scalable. Understanding core design patterns like Factory and Repository is essential for any Magento 2 developer aiming to build high-quality applications.</p>\n</div>\n",
      "author": "Zeevoc Digital",
      "urlKey": "factory-vs-repository-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Factory vs Repository in Magento 2 - Zeevoc Digital",
      "meta_description": "Explore the Factory and Repository patterns in Magento 2. Understand their uses and best practices for efficient development.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d54b",
      "images": "03",
      "title": "CSP Whitelist in Magento 2",
      "category": "Security",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "csp-whitelist-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "CSP Whitelist in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to configure CSP whitelist in Magento 2 to enhance the security of your online store. Detailed steps provided by Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d54e",
      "images": "03",
      "title": "Configuring Config XML in Magento 2",
      "category": "Configuration",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "configuring-config-xml-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Configuring Config XML in Magento 2 - Zeevoc Digital",
      "meta_description": "A comprehensive guide on configuring Config XML in Magento 2. Learn best practices and detailed steps from Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d553",
      "images": "02",
      "title": "Configuring CSP Whitelist in Magento 2",
      "category": "Security",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "configuring-csp-whitelist-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Configuring CSP Whitelist in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to configure CSP whitelist in Magento 2 to enhance the security of your online store. Detailed steps provided by Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d550",
      "images": "02",
      "title": "Understanding Preference in Magento 2",
      "category": "Configuration",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "understanding-preference-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Understanding Preference in Magento 2 - Zeevoc Digital",
      "meta_description": "Understand the concept of Preference in Magento 2 with this detailed guide by Zeevoc Digital. Learn best practices and implementation steps.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d552",
      "images": "04",
      "title": "Understanding CSP in Magento 2",
      "category": "Security",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "understanding-csp-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Understanding CSP in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn the importance of Content Security Policy (CSP) in Magento 2. Understand its configuration and benefits from Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d559",
      "images": "02",
      "title": "Using Dependency Injection in Magento 2",
      "category": "Development",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "using-dependency-injection-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Using Dependency Injection in Magento 2 - Zeevoc Digital",
      "meta_description": "Explore the concept of Dependency Injection in Magento 2. Learn its advantages and implementation with this guide by Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d547",
      "images": "02",
      "title": "Magento 2 Plugins: How and When to Use Them",
      "category": "Development",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "magento-2-plugins-usage",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Magento 2 Plugins: How and When to Use Them - Zeevoc Digital",
      "meta_description": "Learn how and when to use Plugins in Magento 2. Zeevoc Digital provides a comprehensive guide on the effective use of Plugins.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d548",
      "images": "03",
      "title": "Preferences in Magento 2: Best Practices",
      "category": "Best Practices",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "preferences-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Preferences in Magento 2: Best Practices - Zeevoc Digital",
      "meta_description": "Understand the best practices for using Preferences in Magento 2 with this guide by Zeevoc Digital. Learn effective implementation strategies.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d558",
      "images": "04",
      "title": "Creating Custom Attributes in Magento 2",
      "category": "Development",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "creating-custom-attributes-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Creating Custom Attributes in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to create custom attributes in Magento 2. Zeevoc Digital provides step-by-step instructions for efficient attribute creation.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d54a",
      "images": "02",
      "title": "Content Security Policy (CSP) in Magento 2",
      "category": "Security",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "csp-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Content Security Policy (CSP) in Magento 2 - Zeevoc Digital",
      "meta_description": "Understand the importance of Content Security Policy (CSP) in Magento 2. Learn how to configure and implement CSP effectively.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d53e",
      "images": "02",
      "title": "Understanding Events and Observers in Magento 2",
      "category": "Best Practices",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "events-vs-observers-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Understanding Events and Observers in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn the differences, uses, and best practices for implementing Events and Observers in Magento 2. A detailed guide from Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d555",
      "images": "04",
      "title": "Customizing the Magento 2 Checkout Process",
      "category": "Customization",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "customizing-checkout-process-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Customizing the Magento 2 Checkout Process - Zeevoc Digital",
      "meta_description": "Learn how to customize the Magento 2 checkout process. Zeevoc Digital provides detailed steps for effective checkout customization.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d541",
      "images": "02",
      "title": "DB Schema and Whitelist in Magento 2",
      "category": "Database Management",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "db-schema-whitelist-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "DB Schema and Whitelist in Magento 2 - Zeevoc Digital",
      "meta_description": "Understand the DB Schema and Whitelist configurations in Magento 2. Learn best practices and implementation steps with Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d543",
      "images": "04",
      "title": "Custom Payment Method in Magento 2",
      "category": "Customization",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "custom-payment-method-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Custom Payment Method in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to create custom payment methods in Magento 2. Detailed steps and best practices provided by Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d545",
      "images": "03",
      "title": "Understanding System XML in Magento 2",
      "category": "Configuration",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "understanding-system-xml-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Understanding System XML in Magento 2 - Zeevoc Digital",
      "meta_description": "Understand the System XML configuration in Magento 2. Learn detailed steps and best practices with this guide from Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d54d",
      "images": "02",
      "title": "Creating a Custom Router in Magento 2",
      "category": "Development",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "creating-custom-router-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Creating a Custom Router in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to create custom routers in Magento 2. Zeevoc Digital provides detailed steps for creating efficient custom routers.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d551",
      "images": "03",
      "title": "Setting Up ACL in Magento 2",
      "category": "Security",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "setting-up-acl-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Setting Up ACL in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to set up Access Control Lists (ACL) in Magento 2. Detailed steps and best practices from Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d55b",
      "images": "04",
      "title": "Implementing Elasticsearch in Magento",
      "category": "Performance",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "implementing-elasticsearch-magento",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Implementing Elasticsearch in Magento - Zeevoc Digital",
      "meta_description": "Learn how to implement Elasticsearch in Magento for improved performance and search capabilities. Detailed steps from Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d542",
      "images": "03",
      "title": "Creating Custom Indexers in Magento 2",
      "category": "Development",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "creating-custom-indexers-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Creating Custom Indexers in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to create custom indexers in Magento 2 for efficient data indexing. Detailed guide by Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d54c",
      "images": "04",
      "title": "Understanding Setup Upgrade in Magento 2",
      "category": "Setup",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "setup-upgrade-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Understanding Setup Upgrade in Magento 2 - Zeevoc Digital",
      "meta_description": "Understand the setup upgrade process in Magento 2. Learn detailed steps and best practices from Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d554",
      "images": "03",
      "title": "Creating a Custom Module in Magento 2",
      "category": "Development",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "creating-custom-module-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Creating a Custom Module in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to create custom modules in Magento 2. Zeevoc Digital provides a step-by-step guide for efficient module creation.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d556",
      "images": "02",
      "title": "Optimizing Magento 2 Performance",
      "category": "Performance",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "optimizing-magento-2-performance",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Optimizing Magento 2 Performance - Zeevoc Digital",
      "meta_description": "Learn how to optimize Magento 2 performance with detailed steps and best practices from Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d55c",
      "images": "02",
      "title": "Managing Product Inventory in Magento 2",
      "category": "Management",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "managing-product-inventory-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Managing Product Inventory in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to manage product inventory in Magento 2. Zeevoc Digital provides detailed steps and best practices for inventory management.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d55d",
      "images": "03",
      "title": "Setting Up Multi-Store in Magento 2",
      "category": "Management",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "setting-up-multi-store-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Setting Up Multi-Store in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to set up a multi-store environment in Magento 2. Detailed steps and best practices provided by Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d54f",
      "images": "04",
      "title": "Using Plugins in Magento 2",
      "category": "Development",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "using-plugins-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Using Plugins in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to use plugins in Magento 2 effectively. Zeevoc Digital provides a detailed guide on the implementation and use of plugins.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d557",
      "images": "03",
      "title": "Managing Magento 2 Cache",
      "category": "Performance",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "managing-magento-2-cache",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Managing Magento 2 Cache - Zeevoc Digital",
      "meta_description": "Learn how to manage cache in Magento 2 for optimal performance. Detailed steps and best practices from Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d540",
      "images": "04",
      "title": "Uses of RabbitMQ in Magento 2",
      "category": "Performance",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "uses-of-rabbitmq-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Uses of RabbitMQ in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn about the applications and benefits of using RabbitMQ in Magento 2 for improved performance and scalability.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d546",
      "images": "04",
      "title": "Config XML in Magento 2: A Detailed Guide",
      "category": "Configuration",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "config-xml-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Config XML in Magento 2: A Detailed Guide - Zeevoc Digital",
      "meta_description": "A comprehensive guide on configuring Config XML in Magento 2. Learn best practices and detailed steps from Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d549",
      "images": "04",
      "title": "Access Control Lists (ACL) in Magento 2",
      "category": "Security",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "acl-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Access Control Lists (ACL) in Magento 2 - Zeevoc Digital",
      "meta_description": "Learn how to set up and configure Access Control Lists (ACL) in Magento 2. Detailed steps and best practices from Zeevoc Digital.",
      "__v": 0
    },
    {
      "_id": "668fb58ff781f5e8cd91d55a",
      "images": "03",
      "title": "Customizing the Magento 2 Admin Panel",
      "category": "Customization",
      "html_content": "<div>Your HTML content here</div>",
      "author": "Zeevoc Digital",
      "urlKey": "customizing-admin-panel-magento-2",
      "comments_count": 10,
      "created_at": "2024-05-12T00:00:00.000Z",
      "meta_title": "Customizing the Magento 2 Admin Panel - Zeevoc Digital",
      "meta_description": "Learn how to customize the Magento 2 admin panel. Detailed steps and best practices for effective customization by Zeevoc Digital.",
      "__v": 0
    }
  ]